library(tidyverse)
library(osmdata)
library(mapview)
library(sf)
library(rnaturalearth)
library(GADMTools)
library(mapview)
library(ISOcodes)
library(here)
library(glue)
library(data.table)
# get the isocode of austria
ISOcodes::ISO_3166_1 %>%
filter(str_detect(Name, "Austria")) %>% pull(Alpha_3) -> isocode
data_dir = here("data/regions/")
if(!dir.exists(data_dir)){
dir.create(data_dir, recursive = T)
}
# get the shape for austria
austria = gadm_sf.loadCountries(isocode, level=0, basefile = "./data/regions/")$sf
# get the shape for the level 1 regions
regions = gadm_sf.loadCountries(isocode, level=1, basefile = "./data/regions/")$sf
public_transport = regions %>% split(., .$NAME_1) %>% lapply(., function(x) {
name = x$NAME_1
cat("\nGetting data for: ", name, "\r")
f = here(data_dir, glue("{name}.gpkg"))
if (!file.exists(f)) {
osm_bb = getbb(name, featuretype = "region")
data = osm_bb %>% opq(timeout = 60) %>% add_osm_feature(key = "public_transport") %>% osmdata_sf() %>% .[["osm_points"]]
data = data %>% select(osm_id, name, bus, highway, public_transport)
write_sf(data, f)
data
} else{
data = read_sf(f)
data
}
}) %>% rbindlist(idcol = "region") %>% st_as_sf()
unique(public_transport$highway)
table(public_transport$highway)
table(public_transport$public_transport)
name = regions$NAME_1[[1]]
cat("\nGetting data for: ", name, "\r")
osm_bb = getbb(name, featuretype = "region")
name
osm_bb = getbb(name, featuretype = "region")
osm_bb
data = osm_bb %>% opq(timeout = 60) %>% add_osm_feature(key = "public_transport") %>% osmdata_sf() %>% .[["osm_points"]]
data
dim(data)
table(data)
names(data)
data = data %>% select(osm_id, name, bus, highway, public_transport)
data
table(data)
summary(data)
colSums(is.na(data))
lapply(data, function(x){length(unique(x))})
dim(data)
# filter the data ---------------------------------------------------------
public_transport %>%
st_drop_geometry() %>%
length(unique(.$name))
# filter the data ---------------------------------------------------------
public_transport %>%
st_drop_geometry() %>% {
length(unique(.$name))
}
# filter the data ---------------------------------------------------------
public_transport %>%
mutate(x = st_coordinates(.)[, 1],
y = st_coordinates(.)[, 2])
st_drop_geometry() %>%
distinct(.keep_all = T) %>%
st_as_sf(coords=c("x", "y"), crs=4326) -> filt
# filter the data ---------------------------------------------------------
public_transport %>%
mutate(x = st_coordinates(.)[, 1],
y = st_coordinates(.)[, 2]) %>%
st_drop_geometry() %>%
distinct(.keep_all = T) %>%
st_as_sf(., coords = c("x", "y"), crs = 4326) -> filt
mapview(filt)
dim(filt)
# filter the data ---------------------------------------------------------
public_transport %>%
mutate(x = st_coordinates(.)[, 1],
y = st_coordinates(.)[, 2]) %>%
st_drop_geometry() %>%
distinct(name, .keep_all = T) %>%
st_as_sf(., coords = c("x", "y"), crs = 4326) -> filt
dim(filt)
mapview(filt)
st_write(filt, "/home/robin/projects/dst/qgis/isochrones_poi/filtered.gpkg")
st_write(public_transport, "/home/robin/projects/dst/qgis/isochrones_poi/pb.gpkg")
# write out the points to the python dir  ----------------------------------
pts_path = "../pythonIsochrones/stations.geojson"
if(file.exists(pts_path)){
file.remove(pts_path)
}
st_write(pts, pts_path)
st_write(filt, pts_path)
# filter the data ---------------------------------------------------------
public_transport %>%
mutate(x = st_coordinates(.)[, 1],
y = st_coordinates(.)[, 2]) %>%
st_drop_geometry() %>%
distinct(name, .keep_all = T) %>%
st_as_sf(., coords = c("x", "y"), crs = 4326) %>%
mutate(
id  = row_number()
) -> filt
# write out the points to the python dir  ----------------------------------
pts_path = "../pythonIsochrones/stations.geojson"
if(file.exists(pts_path)){
file.remove(pts_path)
}
st_write(filt, pts_path)
# paths -------------------------------------------------------------------
path_multipolygons = "../pythonIsochrones/data/multipolygons"
path_austria = "./data/regions/AUT_adm0.sf.rds"
multipolygons = dir(path_multipolygons, pattern = "*.geojson", full.names = T)
# read data ---------------------------------------------------------------
mp = lapply(multipolygons, st_read)
# create a raster over austria --------------------------------------------
out_dir = "../pythonIsochrones/data/multipolygons/raster"
if(!dir.exists(out_dir)){
dir.create(out_dir)
}
for (source in multipolygons) {
# create name for the raster
bn = basename(source)
dn = dirname(source)
dn_out = paste0(dn, .Platform$file.sep, "raster")
target = paste0(dn_out, "/", sub(".geojson$", replacement = ".tif", bn))
# read vector
mp = read_sf(source)
# build command
cmd = glue("gdal_rasterize -burn 255 -burn 0 -burn 0 -burn 100 -at -tr .005 .005 -ot Byte {source} {target}") #-a_nodata 0
system(cmd)
}
# read shape for austria ---------------------------------------------------------------
aus = readRDS(path_austria)
public_transport = public_transport[aus, ]
dim(public_transport)
# filter the data ---------------------------------------------------------
public_transport %>%
mutate(x = st_coordinates(.)[, 1],
y = st_coordinates(.)[, 2]) %>%
st_drop_geometry() %>%
distinct(name, .keep_all = T) %>%
st_as_sf(., coords = c("x", "y"), crs = 4326) %>%
mutate(
id  = row_number()
) -> filt
dim(filt)
st_write(filt, "/home/robin/projects/dst/qgis/isochrones_poi/filtered.gpkg")
st_write(public_transport, "/home/robin/projects/dst/qgis/isochrones_poi/pb.gpkg")
# write out the points to the python dir  ----------------------------------
pts_path = "../pythonIsochrones/stations.geojson"
if(file.exists(pts_path)){
file.remove(pts_path)
}
st_write(filt, pts_path)
st_write(filt, "/home/robin/projects/dst/qgis/isochrones_poi/filtered.gpkg")
st_write(public_transport, "/home/robin/projects/dst/qgis/isochrones_poi/pb.gpkg")
# paths -------------------------------------------------------------------
path_multipolygons = "../pythonIsochrones/data/multipolygons"
path_austria = "./data/regions/AUT_adm0.sf.rds"
multipolygons = dir(path_multipolygons, pattern = "*.geojson", full.names = T)
# create a raster over austria --------------------------------------------
out_dir = "../pythonIsochrones/data/multipolygons/raster"
if(!dir.exists(out_dir)){
dir.create(out_dir)
}
# create a raster over austria --------------------------------------------
out_dir = "../pythonIsochrones/data/multipolygons/raster"
if(!dir.exists(out_dir)){
dir.create(out_dir)
}
for (source in multipolygons) {
# create name for the raster
bn = basename(source)
dn = dirname(source)
dn_out = paste0(dn, .Platform$file.sep, "raster")
target = paste0(dn_out, "/", sub(".geojson$", replacement = ".tif", bn))
# read vector
mp = read_sf(source)
# build command
cmd = glue("gdal_rasterize -burn 255 -burn 0 -burn 0 -burn 100 -at -tr .005 .005 -ot Byte {source} {target}") #-a_nodata 0
system(cmd)
}
multipolygons
source = multipolygons[[1]]
# create name for the raster
bn = basename(source)
dn = dirname(source)
dn_out = paste0(dn, .Platform$file.sep, "raster")
target = paste0(dn_out, "/", sub(".geojson$", replacement = ".tif", bn))
target
# paths -------------------------------------------------------------------
path_multipolygons = "../pythonIsochrones/data/multipolygons"
path_austria = "./data/regions/AUT_adm0.sf.rds"
multipolygons = dir(path_multipolygons, pattern = "*.geojson", full.names = T)
# create a raster over austria --------------------------------------------
out_dir = "../pythonIsochrones/data/multipolygons/raster"
if(!dir.exists(out_dir)){
dir.create(out_dir)
}
for (source in multipolygons) {
# create name for the raster
bn = basename(source)
dn = dirname(source)
dn_out = paste0(dn, .Platform$file.sep, "raster")
target = paste0(dn_out, "/", sub(".geojson$", replacement = ".tif", bn))
# read vector
mp = read_sf(source)
# build command
cmd = glue("gdal_rasterize -burn 255 -burn 0 -burn 0 -burn 100 -at -tr .005 .005 -ot Byte {source} {target}") #-a_nodata 0
system(cmd)
}
# paths -------------------------------------------------------------------
path_multipolygons = "../pythonIsochrones/data/multipolygons"
path_austria = "./data/regions/AUT_adm0.sf.rds"
multipolygons = dir(path_multipolygons, pattern = "*.geojson", full.names = T)
multipolygons
